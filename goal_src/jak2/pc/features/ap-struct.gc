;;-*-Lisp-*-
(in-package goal)

(define *ap-info-jak2* (new 'static 'ap-info-jak2))
(pc-get-archipelago-struct)

;; Debug: Print initialization status with prominent visibility
(format 0 "============================================~%")
(format 0 "ARCHIPELAGO SYSTEM INITIALIZING~%")
(format 0 "============================================~%")
(format 0 "Archipelago struct initialized at address: ~X~%" *ap-info-jak2*)
(format 0 "Memory struct size: ~D bytes~%" (size-of ap-info-jak2))

;; Initialize connection status to default (0)
(set! (-> *ap-info-jak2* connection-status) (ap-connection-status default))

;; Setup markers
(charp<-string (-> *ap-info-jak2* end-marker) "end")

;; Debug: Verify end marker was set
(string<-charp (clear *temp-string*) (the-as (pointer uint8) (-> *ap-info-jak2* end-marker)))
(format 0 "Archipelago end marker set to: ~S~%" *temp-string*)

;; ****************************************************************************
;; **** This number must match expected_memory_version in MemoryReader.py! ****
;; ****************************************************************************
(set! (-> *ap-info-jak2* version) 2)

;; Debug: Verify version was set
(format 0 "Archipelago version set to: ~D~%" (-> *ap-info-jak2* version))
(format 0 "============================================~%")
(format 0 "ARCHIPELAGO INITIALIZATION COMPLETE~%")
(format 0 "============================================~%")

;; Debug: Print structure size for memory reader alignment
(format 0 "Archipelago structure size: ~D bytes~%" (size-of ap-info-jak2))

;; NOTE: Array field offsets cannot be calculated using & operator in GOAL
;; If memory reader needs exact offsets, they should be calculated manually:
;; - version: offset 0 (uint32 = 4 bytes)
;; - next-mission-index: offset 4 (uint = 4 bytes)
;; - next-side-mission-index: offset 8 (uint = 4 bytes)
;; - missions-checked: offset 12 (uint32[70] = 280 bytes)
;; - side-missions-checked: offset 292 (uint32[24] = 96 bytes)
;; - connection-status: offset 388 (ap-connection-status/uint32 = 4 bytes)
;; - end-marker: offset 392 (uint8[4] = 4 bytes)
(format 0 "Structure layout documented in comments above for memory reader~%")

(defun ap-mission-checked! ((mission-id uint))
  (format 0 "~%~%*************************************************~%")
  (format 0 "*** ARCHIPELAGO MISSION COMPLETION DETECTED ***~%")
  (format 0 "*************************************************~%")
  (format 0 "Mission ID: ~D~%" mission-id)
  (format 0 "Index in array: ~D~%" (-> *ap-info-jak2* next-mission-index))
  (format 0 "Total missions tracked: ~D~%" (+ (-> *ap-info-jak2* next-mission-index) 1))
  (format 0 "*************************************************~%~%")
  (set! (-> *ap-info-jak2* missions-checked (-> *ap-info-jak2* next-mission-index)) mission-id)
  (+! (-> *ap-info-jak2* next-mission-index) 1))

(defun ap-side-mission-checked! ((side-mission-id uint))
  (format 0 "~%~%**************************************************~%")
  (format 0 "*** ARCHIPELAGO SIDE MISSION COMPLETION DETECTED ***~%")
  (format 0 "**************************************************~%")
  (format 0 "Side Mission ID: ~D~%" side-mission-id)
  (format 0 "Index in array: ~D~%" (-> *ap-info-jak2* next-side-mission-index))
  (format 0 "Total side missions tracked: ~D~%" (+ (-> *ap-info-jak2* next-side-mission-index) 1))
  (format 0 "**************************************************~%~%")
  (set! (-> *ap-info-jak2* side-missions-checked (-> *ap-info-jak2* next-side-mission-index)) side-mission-id)
  (+! (-> *ap-info-jak2* next-side-mission-index) 1))
;; TODO: ap orb location stuff
#|
(defun ap-orb-checked! ((actor-id uint))
  (format 0 "~%~%*************************************************~%")
  (format 0 "*** ARCHIPELAGO PRECURSOR ORB COLLECTION DETECTED ***~%")
  (format 0 "*************************************************~%")
  (format 0 "Orb ID: ~D~%" actor-id)
  (format 0 "Index in array: ~D~%" (-> *ap-info-jak2* next-orb-index))
  (format 0 "Total orbs tracked: ~D~%" (+ (-> *ap-info-jak2* next-orb-index) 1))
  (format 0 "*************************************************~%~%")
  (set! (-> *ap-info-jak2* orbs-checked (-> *ap-info-jak2* next-orb-index)) actor-id)
  (+! (-> *ap-info-jak2* next-orb-index) 1))
|#
(defun ap-set-connection-status! ((status ap-connection-status))
  "Set the Archipelago connection status. Returns the status that was set."
  (set! (-> *ap-info-jak2* connection-status) status)
  status)

(defun ap-draw-connection-status ()
  "Draw the current Archipelago connection status on screen every frame"
  ;; Safety check: only draw if both required globals are initialized
  (when (and *ap-info-jak2* *common-text*)
    (case (-> *ap-info-jak2* connection-status)
      (((ap-connection-status default))
       (format *stdcon0* "~%~4L~S~0L~%" (lookup-text! *common-text* (text-id ap-connecting) #f)))
      (((ap-connection-status wait))
       (format *stdcon0* "~%~4L~S~0L~%" (lookup-text! *common-text* (text-id ap-waiting-for-items) #f)))
      (((ap-connection-status failure))
       (format *stdcon0* "~%~4L~S~0L~%" (lookup-text! *common-text* (text-id ap-connection-failed) #f)))
      ;; No message for ready status - connection is successful
      ))
  (none))

;; Debug function to manually test mission completion tracking
(defun ap-debug-test-mission-completion ()
  "Test function to manually trigger mission completion debug output"
  (format 0 "~%~%===============================================~%")
  (format 0 "TESTING ARCHIPELAGO MISSION COMPLETION SYSTEM~%")
  (format 0 "===============================================~%")
  (format 0 "Current mission index: ~D~%" (-> *ap-info-jak2* next-mission-index))
  (format 0 "Current side mission index: ~D~%" (-> *ap-info-jak2* next-side-mission-index))
  (format 0 "Testing mission completion...~%")
  (ap-mission-checked! (the-as uint 1))  ;; fortress-escape
  (format 0 "Testing side mission completion...~%")
  (ap-side-mission-checked! (the-as uint 100))  ;; dummy side mission
  (format 0 "===============================================~%")
  (format 0 "TEST COMPLETE - Check output above~%")
  (format 0 "===============================================~%~%")
  (none))

;; Debug function to manually test task resolution close
(defun ap-debug-test-task-resolution ()
  "Test function to manually call task-resolution-close! to see debug output"
  (format 0 "~%~%===============================================~%")
  (format 0 "TESTING TASK-RESOLUTION-CLOSE! DIRECTLY~%")
  (format 0 "===============================================~%")
  (format 0 "Calling task-resolution-close! with fortress-escape...~%")
  (task-resolution-close! (game-task fortress-escape))
  (format 0 "===============================================~%")
  (format 0 "TEST COMPLETE - Check output above~%")
  (format 0 "===============================================~%~%")
  (none))

;; Debug function to show current task states
(defun ap-debug-show-task-states ()
  "Show current completion state of some key missions"
  (format 0 "~%~%===============================================~%")
  (format 0 "CURRENT TASK STATES~%")
  (format 0 "===============================================~%")
  (format 0 "fortress-escape complete?: ~A~%" (task-complete? *game-info* (game-task fortress-escape)))
  (format 0 "city-help-kid complete?: ~A~%" (task-complete? *game-info* (game-task city-help-kid)))
  (format 0 "city-vehicle-training complete?: ~A~%" (task-complete? *game-info* (game-task city-vehicle-training)))
  (format 0 "Game task counter: ~D~%" (-> *game-info* task-counter))
  (format 0 "===============================================~%~%")
  (none))

;; Debug function to test connection status display
(defun ap-debug-test-connection-status ()
  "Cycle through connection status values for testing display"
  (case (-> *ap-info-jak2* connection-status)
    (((ap-connection-status default)) (ap-set-connection-status! (ap-connection-status wait)))
    (((ap-connection-status wait)) (ap-set-connection-status! (ap-connection-status failure)))
    (((ap-connection-status failure)) (ap-set-connection-status! (ap-connection-status ready)))
    (((ap-connection-status ready)) (ap-set-connection-status! (ap-connection-status default)))
    (else (ap-set-connection-status! (ap-connection-status default))))
  (format 0 "~%~%===============================================~%")
  (format 0 "ARCHIPELAGO DEBUG MODE TOGGLE~%")
  (format 0 "===============================================~%")
  (format 0 "Connection status changed to: ~D~%" (-> *ap-info-jak2* connection-status))
  (format 0 "Status meaning: ~A~%" 
    (case (-> *ap-info-jak2* connection-status)
      (((ap-connection-status default)) "Connecting to Archipelago")
      (((ap-connection-status wait)) "Waiting for items from other players")
      (((ap-connection-status failure)) "Connection failed - check client")
      (((ap-connection-status ready)) "Connected and ready")
      (else "Unknown status")))
  (format 0 "===============================================~%~%")
  (none))

(defun ap-item-received! ((item symbol))
  (case item
    (('gun-yellow)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-gun-yellow))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss012")) ;; blaster mod
        ))
    (('gun-red)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-gun-red))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss011")) ;; scatter gun
        ))
    (('gun-blue)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-gun-blue))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss013")) ;; vulcan barrel
        ))
    (('gun-dark)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-gun-dark))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss014")) ;; peace maker
        ))
    (('board)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-board))))
        (eval-add dummy-node)
         (script-eval '(talker-spawn "board001")) ;; jetboard
      ))
    (('darkjak)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-darkjak))))
        (eval-add dummy-node)
         (script-eval '(talker-spawn "dark001")) ;; dark jak
        ))
    (('gun-upgrade-speed)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-gun-up-1))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss002")))) ;; gun speed upgrade
    (('gun-upgrade-ammo)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-gun-up-2))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss003")))) ;; gun ammo upgrade
    (('gun-upgrade-damage)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-gun-up-3))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss004")))) ;; gun damage upgrade
    (('pass-red)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-pass-red))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss006")))) ;; red security pass
    (('pass-green)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-pass-green))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss007")))) ;; green security pass
    (('pass-yellow)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-pass-yellow))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss008")))) ;; yellow security pass
    (('darkjak-bomb0)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-darkjak-0))))
        (eval-add dummy-node)
         (script-eval '(talker-spawn "dark002")) ;; dark bomb
        ))
    (('darkjak-bomb1)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-darkjak-1))))
        (eval-add dummy-node)
         (script-eval '(talker-spawn "dark003")) ;; dark blast
        ))
    (('darkjak-invinc)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-darkjak-2))))
        (eval-add dummy-node)
         (script-eval '(talker-spawn "dark004")) ;; dark invincibility
        ))
    (('darkjak-giant)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-darkjak-3))))
        (eval-add dummy-node)
         (script-eval '(talker-spawn "dark005")) ;; dark giant
        ))
    (('pass-purple)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-pass-purple))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss009")))) ;; palace/purple security pass
    (('pass-black)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-pass-black))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "miss010")))) ;; weapons factory/black security pass
    (('pass-air-train)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-pass-air-train))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "air001")) ;; air train pass
        ))
    (('lens)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-lens))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "lens001")))) ;; mountain lens
    (('gear)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-gear))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "gear001")))) ;; mountain gear
    (('shard)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-shard))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "shard001")))) ;; mountain shard
    (('ruby-key)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-ruby-key))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "ruby001")) ;; ruby key
        ))
    (('heart-of-mar)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-heart-of-mar))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "heart001")) ;; heart of mar
        ))
    (('time-map)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-time-map))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "time001")) ;; time map
        ))
    (('precursor-stone)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-precursor-stone))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "stone001")) ;; precursor stone
        ))
    (('life-seed)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-life-seed))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "seed001")) ;; life seed
        ))
    (('titan-suit)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-titan-suit))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "suit001")) ;; titan suit
        ))
    (('gun-turret)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-gun-turret))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "turret001")) ;; gun turret
        ))
    (('seal-piece-1)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-seal-piece-1))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "seal001")) ;; seal piece 1
        ))
    (('seal-piece-2)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-seal-piece-2))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "seal002")) ;; seal piece 2
        ))
    (('seal-piece-3)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-seal-piece-3))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "seal003")) ;; seal piece 3
        ))
    (('rift-rider)
      (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-rift-rider))))
        (eval-add dummy-node)
        (script-eval '(talker-spawn "car001")) ;; rift rider
        ))
    (('dark-eco-pill)
     (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-dark-eco))))
      (eval-add dummy-node)
      (script-eval '(talker-spawn "pill001")) ;; dark eco pill filler item
      (send-event *target* 'get-pickup (pickup-type eco-pill-dark) 1.0)
     ))
    (('health-pack)
     (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-health-pickup))))
      (eval-add dummy-node)
      (script-eval '(talker-spawn "health001")) ;; health pickup filler item
      (send-event *target* 'get-pickup (pickup-type health) 2.0)
     ))
    (('ammo-red)
     (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-ammo-red))))
      (eval-add dummy-node)
      (script-eval '(talker-spawn "ammo001")) ;; scatter gun ammo filler item
      (send-event *target* 'get-pickup (pickup-type ammo-red) 5.0)
     ))
    (('ammo-yellow)
     (let ((dummy-node (new 'static 'game-task-node-info :add (game-task-node-command add-ammo-yellow))))
      (eval-add dummy-node)
      (script-eval '(talker-spawn "ammo002")) ;; blaster ammo filler item
      (send-event *target* 'get-pickup (pickup-type ammo-yellow) 10.0)
     )) 
    )
  ;; (auto-save-command 'save 0 0 *default-pool* #f) ;; <ap:todo> Fails compilation because ap-struct declared too early. Any way to fix this?
  #t
  )

(defun ap-route-slums-to-port? ()
  (or (logtest? (-> *game-info* features) (game-feature pass-red))                 ;; direct route.
      (logtesta? (-> *game-info* features) (game-feature pass-green pass-yellow))  ;; through stadium town and farms.
      (logtesta? (-> *game-info* features) (game-feature pass-air-train board))    ;; pumping station -> grind rails -> landing pad -> port.
      )
  )

(defun ap-route-slums-to-stadium? ()
  (or (logtest? (-> *game-info* features) (game-feature pass-green))                         ;; direct route.
      (logtesta? (-> *game-info* features) (game-feature pass-red pass-yellow))              ;; through port and farms.
      (logtesta? (-> *game-info* features) (game-feature pass-air-train board pass-yellow))  ;; pumping station + yellow pass.
      )
  )

(defun ap-route-slums-to-market? ()
  (or (logtesta? (-> *game-info* features) (game-feature pass-green pass-yellow))            ;; through stadium.
      (logtesta? (-> *game-info* features) (game-feature pass-red pass-yellow))              ;; through port.
      (logtesta? (-> *game-info* features) (game-feature pass-air-train board pass-yellow))  ;; pumping station + yellow pass.
      )
  )

(defun ap-route-port-to-stadium? ()
  (or (logtest? (-> *game-info* features) (game-feature pass-yellow))                        ;; direct route.
      (logtesta? (-> *game-info* features) (game-feature pass-red pass-green))               ;; through slums.
      (logtesta? (-> *game-info* features) (game-feature pass-air-train board pass-green))   ;; pumping station + green pass.
      )
  )

(defun ap-route-port-to-market? ()
  (logtest? (-> *game-info* features) (game-feature pass-yellow))  ;; there is no way into the market without yellow pass.
  )

(defun ap-route-market-to-stadium? ()
  (logtest? (-> *game-info* features) (game-feature pass-yellow))  ;; there is no way OUT OF the market without yellow pass.
  )

(defun ap-route-slums-to-landing? ()
  (or (logtest? (-> *game-info* features) (game-feature board))                                   ;; pumping station.
      (logtesta? (-> *game-info* features) (game-feature pass-red pass-air-train))                ;; through port.
      (logtesta? (-> *game-info* features) (game-feature pass-green pass-yellow pass-air-train))  ;; through stadium town and farms.
      )
  )

(defun ap-route-slums-to-nest? ()
  (or (logtesta? (-> *game-info* features) (game-feature board pass-air-train))                   ;; pumping station.
      (logtesta? (-> *game-info* features) (game-feature pass-red pass-air-train))                ;; through port.
      (logtesta? (-> *game-info* features) (game-feature pass-green pass-yellow pass-air-train))  ;; through stadium town and farms.
      )
  )
