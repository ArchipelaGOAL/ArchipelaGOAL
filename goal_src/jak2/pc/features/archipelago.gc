;;-*-Lisp-*-
(in-package goal)

(define *archipelago-info-jak2* (new 'static 'archipelago-info))
(pc-init-archipelago-struct)
;; Setup Version
(set! (-> *archipelago-info-jak2* version-major) 0)
(set! (-> *archipelago-info-jak2* version-minor) 1)
;; Setup markers
(charp<-string (-> *archipelago-info-jak2* end-marker) "end")
;; Setup Padding
(charp<-string (-> *archipelago-info-jak2* padding-stats) "padding-stats!")
(charp<-string (-> *archipelago-info-jak2* padding-controls) "padding-controls!")

(defmacro archipelago-flag-task-complete! (field-name task-name)
  "Given a field name in the archipelago struct, and a [[game-task]] name to check, sets either a 0 or a 1"
  `(begin
    (if (!= (-> this ,field-name) (if (task-complete? *game-info* (game-task ,task-name)) 1 0))
      (format 0 "ARCHIPELAGO MISSION COMPLETED: ~A (enum value: ~D)~%" (quote ,task-name) (game-task ,task-name)))
    (set! (-> this ,field-name) (if (task-complete? *game-info* (game-task ,task-name)) 1 0))))

(defmacro archipelago-flag-task-node-closed! (field-name task-node-name)
  "Given a field name in the archipelago struct, and a [[game-task-node]] name to check, sets either a 0 or a 1"
  `(begin
    (if (!= (-> this ,field-name) (if (task-node-closed? (game-task-node ,task-node-name)) 1 0))
      (format 0 "ARCHIPELAGO TASK NODE CLOSED: ~A (enum value: ~D)~%" (quote ,task-node-name) (game-task-node ,task-node-name)))
    (set! (-> this ,field-name) (if (task-node-closed? (game-task-node ,task-node-name)) 1 0))))

(defmethod update! ((this archipelago-info))
  ;; Add heartbeat debug every 5 seconds (300 frames at 60fps)
  (when (= (mod (-> *display* frame-counter) 300) 0)
    (format 0 "ARCHIPELAGO HEARTBEAT: Frame ~D, System running~%" (-> *display* frame-counter)))
  
  ;; general statistics
  ;; when we are blacked out in loads the value of these are temporarily 0, and that messes with the auto splitter.
  (let ((in-blackout? (>= (-> *game-info* blackout-time) (current-time))))
    (when (not in-blackout?)
      (set! (-> this num-orbs) (the int (-> *game-info* skill-total)))
      (set! (-> this num-skullgems) (the int (-> *game-info* gem-total)))
      ;; ending conditions
      ;; all collectables
      ;; - check for all orbs (which require all missions conveniently)
      ;; - also check for all darkjak powers
      (set! (-> this all-collectables-acquired?)
            (if (and (logtest? (-> *game-info* features) (game-feature darkjak-giant))
                    (>= (-> this num-orbs) 286))
              1 0)))
  )
  ;; loading/cutscene related flags
  (set! (-> this in-cutscene?) (if (movie?) 1 0))
  ;; need resolution flags
  (archipelago-flag-task-complete! res-fortress-escape fortress-escape)
  (archipelago-flag-task-complete! res-city-help-kid city-help-kid)
  (archipelago-flag-task-complete! res-city-vehicle-training city-vehicle-training)
  (archipelago-flag-task-complete! res-ruins-tower ruins-tower)
  (archipelago-flag-task-complete! res-atoll-water atoll-water)
  (archipelago-flag-task-complete! res-fortress-dump fortress-dump)
  (archipelago-flag-task-complete! res-city-krew-delivery city-krew-delivery)
  (archipelago-flag-task-complete! res-city-red-gun-training city-red-gun-training)
  (archipelago-flag-task-complete! res-atoll-sig atoll-sig)
  (archipelago-flag-task-complete! res-sewer-enemy sewer-enemy)
  (archipelago-flag-task-complete! res-strip-rescue strip-rescue)
  (archipelago-flag-task-complete! res-atoll-battle atoll-battle)
  (archipelago-flag-task-complete! res-mountain-lens mountain-lens)
  (archipelago-flag-task-complete! res-mountain-gear mountain-gear)
  (archipelago-flag-task-complete! res-mountain-shard mountain-shard)
  (archipelago-flag-task-complete! res-mountain-collection mountain-collection)
  (archipelago-flag-task-complete! res-city-keira-delivery city-keira-delivery)
  (archipelago-flag-task-complete! res-stadium-board1 stadium-board1)
  (archipelago-flag-task-complete! res-city-krew-collection city-krew-collection)
  (archipelago-flag-task-complete! res-city-yellow-gun-training city-yellow-gun-training)
  (archipelago-flag-task-complete! res-drill-eggs drill-eggs)
  (archipelago-flag-task-complete! res-city-power city-power)
  (archipelago-flag-task-complete! res-palace-cable palace-cable)
  (archipelago-flag-task-complete! res-palace-boss palace-boss)
  (archipelago-flag-task-complete! res-city-shuttle city-shuttle)
  (archipelago-flag-task-complete! res-ruins-enemy ruins-enemy)
  (archipelago-flag-task-complete! res-city-blue-gun-training city-blue-gun-training)
  (archipelago-flag-task-complete! res-forest-scouts forest-scouts)
  (archipelago-flag-task-complete! res-city-escort-kid city-escort-kid)
  (archipelago-flag-task-complete! res-dig-knock-down dig-knock-down)
  (archipelago-flag-task-complete! res-strip-grenade strip-grenade)
  (archipelago-flag-task-complete! res-drill-ship drill-ship)
  (archipelago-flag-task-complete! res-city-port-run city-port-run)
  (archipelago-flag-task-complete! res-city-meet-brutter city-meet-brutter)
  (archipelago-flag-task-complete! res-sewer-board sewer-board)
  (archipelago-flag-task-complete! res-forest-hunt forest-hunt)
  (archipelago-flag-task-complete! res-city-intercept-tanker city-intercept-tanker)
  (archipelago-flag-task-complete! res-stadium-race-class3 stadium-race-class3)
  (archipelago-flag-task-complete! res-city-protect-water-slums city-protect-water-slums)
  (archipelago-flag-task-complete! res-dig-find-totem dig-find-totem)
  (archipelago-flag-task-complete! res-city-destroy-guard-vehicles city-destroy-guard-vehicles)
  (archipelago-flag-task-complete! res-city-play-onin-game city-play-onin-game)
  (archipelago-flag-task-complete! res-canyon-insert-items canyon-insert-items)
  (archipelago-flag-task-complete! res-tomb-poles tomb-poles)
  (archipelago-flag-task-complete! res-tomb-water tomb-water)
  (archipelago-flag-task-complete! res-tomb-boss tomb-boss)
  (archipelago-flag-task-complete! res-fortress-save-friends fortress-save-friends)
  (archipelago-flag-task-complete! res-sewer-escort sewer-escort)
  (archipelago-flag-task-complete! res-city-dark-gun-training city-dark-gun-training)
  (archipelago-flag-task-complete! res-stadium-race-class2 stadium-race-class2)
  (archipelago-flag-task-complete! res-city-stop-bomb-bots city-stop-bomb-bots)
  (archipelago-flag-task-complete! res-city-errol-challenge city-errol-challenge)
  (archipelago-flag-task-complete! res-strip-drop strip-drop)
  (archipelago-flag-task-complete! res-ruins-mech ruins-mech)
  (archipelago-flag-task-complete! res-forest-protect forest-protect)
  (archipelago-flag-task-complete! res-drill-mech drill-mech)
  (archipelago-flag-task-complete! res-city-save-lurkers city-save-lurkers)
  (archipelago-flag-task-complete! res-stadium-race-class stadium-race-class)
  (archipelago-flag-task-complete! res-palace-sneak-in palace-sneak-in)
  (archipelago-flag-task-complete! res-castle-break-in castle-break-in)
  (archipelago-flag-task-complete! res-castle-boss castle-boss)
  (archipelago-flag-task-complete! res-city-whack city-whack)
  (archipelago-flag-task-complete! res-under-mech under-mech)
  (archipelago-flag-task-complete! res-under-sig under-sig)
  (archipelago-flag-task-complete! res-city-defend-stadium city-defend-stadium)
  (archipelago-flag-task-complete! res-consite-find-baron consite-find-baron)
  (archipelago-flag-task-complete! res-nest-get-to-gun nest-get-to-gun)
  (archipelago-flag-task-complete! res-nest-enter nest-enter)
  (archipelago-flag-task-complete! res-nest-boss nest-boss)
  (archipelago-flag-task-complete! res-city-win city-win)
  (archipelago-flag-task-complete! res-city-oracle city-oracle)
  (archipelago-flag-task-complete! res-city-burning-bush-ring-1 city-burning-bush-ring-1)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-1 city-burning-bush-get-to-1)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-2 city-burning-bush-get-to-2)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-3 city-burning-bush-get-to-3)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-4 city-burning-bush-get-to-4)
  (archipelago-flag-task-complete! res-city-burning-bush-collection-1 city-burning-bush-collection-1)
  (archipelago-flag-task-complete! res-city-burning-bush-racepoint-1 city-burning-bush-racepoint-1)
  (archipelago-flag-task-complete! res-city-burning-bush-ring-2 city-burning-bush-ring-2)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-5 city-burning-bush-get-to-5)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-6 city-burning-bush-get-to-6)
  (archipelago-flag-task-complete! res-city-burning-bush-shuttle-1 city-burning-bush-shuttle-1)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-7 city-burning-bush-get-to-7)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-8 city-burning-bush-get-to-8)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-9 city-burning-bush-get-to-9)
  (archipelago-flag-task-complete! res-city-burning-bush-collection-2 city-burning-bush-collection-2)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-10 city-burning-bush-get-to-10)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-11 city-burning-bush-get-to-11)
  (archipelago-flag-task-complete! res-city-burning-bush-ring-3 city-burning-bush-ring-3)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-12 city-burning-bush-get-to-12)
  (archipelago-flag-task-complete! res-city-burning-bush-bombbot-1 city-burning-bush-bombbot-1)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-13 city-burning-bush-get-to-13)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-14 city-burning-bush-get-to-14)
  (archipelago-flag-task-complete! res-city-burning-bush-get-to-15 city-burning-bush-get-to-15)
  (archipelago-flag-task-complete! res-city-burning-bush-collection-3 city-burning-bush-collection-3)
  (archipelago-flag-task-complete! res-city-burning-bush-race-errol city-burning-bush-race-errol)
  (archipelago-flag-task-complete! res-city-burning-bush-race-port city-burning-bush-race-port)
  (archipelago-flag-task-complete! res-stadium-burning-bush-race-board stadium-burning-bush-race-board)
  (archipelago-flag-task-complete! res-stadium-burning-bush-race-class3 stadium-burning-bush-race-class3)
  (archipelago-flag-task-complete! res-stadium-burning-bush-race-class2 stadium-burning-bush-race-class2)
  (archipelago-flag-task-complete! res-stadium-burning-bush-race-class1 stadium-burning-bush-race-class1)
  (archipelago-flag-task-complete! res-stadium-burning-bush-race-class3-r stadium-burning-bush-race-class3-r)
  (archipelago-flag-task-complete! res-stadium-burning-bush-race-class2-r stadium-burning-bush-race-class2-r)
  (archipelago-flag-task-complete! res-stadium-burning-bush-race-class1-r stadium-burning-bush-race-class1-r)
  ;; misc other tasks
  (archipelago-flag-task-node-closed! tomb-poles-poles tomb-poles-poles)  ;; left tomb/daxter boulder start
  (archipelago-flag-task-node-closed! fortress-save-friends-introduction fortress-save-friends-introduction) ;; talk to torn (before rescue friends)
  (archipelago-flag-task-node-closed! sewer-escort-get-gun sewer-escort-get-gun) ;; get peacemaker
  (archipelago-flag-task-node-closed! forest-protect-introduction forest-protect-introduction) ;; talk to onin (protect samos)
  (archipelago-flag-task-node-closed! forest-protect-meeting forest-protect-meeting) ;; talk to samos (protect samos)

  ;; debug only, draw stuff to the screen so i don't have to stare at a memory editor
  ;; (debug-draw this)
  (none))


(defmethod reset! ((this archipelago-info))
  (set! (-> this game-hash) (pc-get-unix-timestamp))
  (set! (-> this kor-dead?) 0)
  (none))

(defmethod debug-draw ((this archipelago-info))
  (clear *temp-string*)
  (format *temp-string* "kor-dead?: ~D~%" (-> this kor-dead?))
  (format *temp-string* "all-collectables-acquired?: ~D~%" (-> this all-collectables-acquired?))
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 10 50 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *temp-string* buf font-ctx)))
  (none))