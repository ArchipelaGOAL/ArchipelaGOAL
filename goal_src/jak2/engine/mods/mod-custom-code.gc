    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    (defun runs-every-frame ()
      ;; (increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc

      ;; Sample code to turn jak pink whenever he's doing the jetboard hover glitch
      ;; (when *target* 
      ;;   (if (board-hovering?)
      ;;     (draw-pink *target*)
      ;;     (draw-normal *target*)
      ;;     )
      ;;   )

      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )

      (when *debug-segment*
        (orb-placer-maintenance)
        )
      
      ;; <ap:note> comment this out/in to show to testers.
      (when *debug-segment*
        (format *stdcon0* "~%~4LArchipelaGOAL II - Test Build~0L~%Found a bug? Send us a screenshot with this information!~%~%")
        (format *stdcon0* "~4Lgame features:~0L ~S~%"
          (begin
            (clear *temp-string*)
            (bit-enum->string game-feature (-> *game-info* features) *temp-string*)
            *temp-string*
            )
          )
        (format *stdcon0* "~4Lcurrent level:~0L ~S~%~4Ltask masks:~0L    ~S~%"
          (current-level-name)
          (begin
            (clear *temp-string*)
            (bit-enum->string task-mask (-> (level-get-target-inside *level*) task-mask) *temp-string*)
            *temp-string*
            )
          )
        (format *stdcon0* "~4Lcurrent tasks:~0L~%~%")
        (let ((level (level-get-target-inside *level*)))
          (when level
            (let ((lvlname (-> level info taskname))
                  (subtasks (-> *game-info* sub-task-list)))
              (dotimes (i (-> subtasks length))
                (when (nonzero? i)
                  (let ((subtask (-> subtasks i)))
                    (when (= (-> subtask level) lvlname)
                      (case lvlname
                        (('city) ;; too many missions in city, we need to only display open ones.
                          (if (open? subtask) 
                            (format *stdcon0* "  ~17L~S~0L~%" (-> subtask name))))
                        (else
                          (cond
                            ((logtest? (-> subtask flags) (game-task-node-flag closed))
                              (format *stdcon0* "  ~15L~S~0L~%" (-> subtask name)))
                            ((open? subtask)
                              (format *stdcon0* "  ~17L~S~0L~%" (-> subtask name)))
                            (else
                              (format *stdcon0* "  ~19L~S~0L~%" (-> subtask name)))))))))))))
          )

      ;; <ap:todo> move all door code overrides from run-every-frame to a separate process.

      ;; <ap:preserve-this> airlock doors in Jak 2 each contain logic determining which level geometry they will load
      ;; based on the mission tree state. This logic is baked into their objects, not just the actor state machines.
      ;; Barg's and Alex's best known way to override this behavior is to run code every frame, for each door, 
      ;; and alter the command list baked into them. We need to modify the car and cdr of the command list separately, 
      ;; so sometimes the car is a "cond" and we only need to modify its body (the cdr). Other times its a "cond" but
      ;; we want a "when" so we modify the car. 

      ;; oracle
      (let ((cty-ora-door (entity-by-name "oracle-door-3")))
        (when cty-ora-door
          (set! (cdr (res-lump-struct cty-ora-door 'on-notice pair)) '(#t '(oracle)))
          )
        )

      ;; sewer
      (let ((cty-sew-out-door (entity-by-name "com-airlock-outer-13")))
        (when cty-sew-out-door
          (set! (cdr (res-lump-struct cty-sew-out-door 'on-activate pair))   '(((and (task-closed? "sewer-enemy-introduction") (not (task-complete? 15))) (want-load 'sewerb 'ctyindb 'ctywide)) ((and (task-closed? "sewer-board-introduction") (not (task-complete? 40))) (want-load 'sewerb 'ctyindb 'ctywide)) ((and (task-closed? "sewer-escort-introduction") (not (task-complete? 53))) (want-load 'sewescb 'ctyindb 'ctywide))))
          (set! (cdr (res-lump-struct cty-sew-out-door 'on-cross pair))      '(((and (task-closed? "sewer-enemy-introduction") (not (task-complete? 15))) (want-sound 'ctywide1 'ctywide2 'sewer1) '(want-vis 'sewer)) ((and (task-closed? "sewer-board-introduction") (not (task-complete? 40))) (want-sound 'ctywide1 'ctywide2 'sewer1) '(want-vis 'sewer)) ((and (task-closed? "sewer-escort-introduction") (not (task-complete? 53))) (want-sound 'ctywide1 'ctywide2 'sewer4) '(want-vis 'sewesc))))
          (set! (cdr (res-lump-struct cty-sew-out-door 'on-deactivate pair)) '(((and (task-closed? "sewer-enemy-introduction") (not (task-complete? 15))) (want-display 'sewerb #f) (want-sound 'ctywide1 'ctywide2 'ctywide3)) ((and (task-closed? "sewer-board-introduction") (not (task-complete? 40))) (want-display 'sewerb #f) (want-sound 'ctywide1 'ctywide2 'ctywide3)) ((and (task-closed? "sewer-escort-introduction") (not (task-complete? 53))) (want-display 'sewescb #f) (want-sound 'ctywide1 'ctywide2 'ctywide3))))
          (set! (cdr (res-lump-struct cty-sew-out-door 'on-enter pair))      '(((and (task-closed? "sewer-enemy-introduction") (not (task-complete? 15))) (want-display 'sewerb 'display) (want-sound 'ctywide1 'ctywide2 'sewer1)) ((and (task-closed? "sewer-board-introduction") (not (task-complete? 40))) (want-display 'sewerb 'display) (want-sound 'ctywide1 'ctywide2 'sewer1)) ((and (task-closed? "sewer-escort-introduction") (not (task-complete? 53))) (want-display 'sewescb 'display) (want-sound 'ctywide1 'ctywide2 'sewer4))))
          (set! (cdr (res-lump-struct cty-sew-out-door 'on-notice pair))     '(((and (task-closed? "sewer-enemy-introduction") (not (task-complete? 15))) '(sewerb)) ((and (task-closed? "sewer-board-introduction") (not (task-complete? 40))) '(sewerb)) ((and (task-closed? "sewer-escort-introduction") (not (task-complete? 53))) '(sewescb))))
          )
        )

      ;; fortress
      (let ((cty-for-out-door (entity-by-name "fort-entry-gate-17"))
            (cty-fordump-in-door (entity-by-name "fort-entry-gate-4"))
            (cty-forresc-in-door (entity-by-name "fort-entry-gate-7")))
        (when cty-for-out-door
          (set! (cdr (res-lump-struct cty-for-out-door 'on-activate pair)) '(((and (task-closed? "fortress-dump-introduction") (not (task-complete? 11))) (want-load 'ctysluma 'ctywide 'fordumpa)) ((and (task-closed? "fortress-save-friends-introduction") (not (task-complete? 52))) (want-load 'ctysluma 'ctywide 'forresca))))
          (set! (cdr (res-lump-struct cty-for-out-door 'on-cross pair))    '(((and (task-closed? "fortress-dump-introduction") (not (task-complete? 11))) (want-vis 'fordumpa)) ((and (task-closed? "fortress-save-friends-introduction") (not (task-complete? 52))) (want-vis 'forresca))))
          (set! (cdr (res-lump-struct cty-for-out-door 'on-enter pair))    '(((and (task-closed? "fortress-dump-introduction") (not (task-complete? 11))) (want-display 'fordumpa 'display) (want-sound 'ctywide1 'ctywide2 'fordump1)) ((and (task-closed? "fortress-save-friends-introduction") (not (task-complete? 52))) (want-display 'forresca 'display) (want-sound 'ctywide1 'ctywide2 'forresc1))))
          (set! (cdr (res-lump-struct cty-for-out-door 'on-notice pair))   '(((and (task-closed? "fortress-dump-introduction") (not (task-complete? 11))) '(fordumpa)) ((and (task-closed? "fortress-save-friends-introduction") (not (task-complete? 52))) '(forresca))))
          )
        (when cty-fordump-in-door
          (set! (cdr (res-lump-struct cty-fordump-in-door 'on-deactivate pair)) '((want-sound 'fordump1 'fordump2 'fordump3)))
          )
        (when cty-forresc-in-door
          (set! (cdr (res-lump-struct cty-forresc-in-door 'on-deactivate pair)) '((want-sound 'ctywide1 'forresc1 'forresc2)))
          )
        )

      ;; mountain (affects forest, canyon)
      (let ((cty-mtn-out-door (entity-by-name "com-airlock-outer-32")))
         (when cty-mtn-out-door
           (set! (cdr (res-lump-struct cty-mtn-out-door 'on-notice pair)) '(((or (task-closed? "mountain-lens-introduction") (task-closed? "forest-scouts-introduction") (task-closed? "forest-hunt-introduction") (task-closed? "forest-protect-introduction") (task-closed? "canyon-insert-items-introduction")) '(ctyfarma))))
           )
       )

      ;; hiphog (affects gungame, under)
      (let ((cty-hh-out-door (entity-by-name "hip-door-a-6")))
        (when cty-hh-out-door
          (set! (cdr (res-lump-struct cty-hh-out-door 'on-notice pair)) '((#t '(hiphog))))
        )
      )

      ;; vinroom (affects strip, drill)
      (let ((cty-vin-door (entity-by-name "vin-door-ctyinda-1"))
            (vinroom-warp (entity-by-name "warp-gate-21")))
        (when cty-vin-door
          (set! (cdr (res-lump-struct cty-vin-door 'on-notice pair)) '(#t '(vinroom)))
        )
        (when vinroom-warp
          (set! (cdr (res-lump-struct vinroom-warp 'on-notice pair)) '(((and (task-closed? "strip-rescue-introduction") (not (task-complete? 16))) '("strip-warp" (want-load 'vinroom 'strip) (strip))) ((and (task-closed? "drill-eggs-introduction") (not (task-complete? 26))) '("drill1-warp" (want-load 'vinroom 'drillmid) (drillmid))) ((and (task-closed? "city-power-introduction") (not (task-complete? 27))) #f) ((and (task-closed? "strip-grenade-introduction") (not (task-complete? 36))) '("strip-warp" (want-load 'vinroom 'strip) (strip))) ((and (task-closed? "drill-ship-introduction") (not (task-complete? 37))) '("drill-warp-gunship" (want-load 'vinroom 'drillmid) (drillmid))) ((and (task-closed? "strip-drop-introduction") (not (task-complete? 58))) '("strip-warp" (want-load 'vinroom 'strip) (strip))) ((and (task-closed? "drill-mech-introduction") (not (task-complete? 61))) '("drill3-warp" (want-load 'vinroom 'drillmid) (drillmid))) (else '("strip-warp" (want-load 'vinroom 'strip) (strip)))))
        )
      )

      ;; dig
      (let ((dig-elev (entity-by-name "cpad-elevator-1"))
            (region-544 (region-lookup-by-id 544))
            (region-549 (region-lookup-by-id 549)))
        (when dig-elev
          (set! (cdr (res-lump-struct dig-elev 'on-notice pair)) '(#t))
          )
        (when region-544
          (set! (-> region-544 on-enter) '(cond ((and (task-closed? "dig-knock-down-introduction") (not (task-complete? 35))) (want-load 'dig1 'caspad #f) (want-sound 'dig1 'dig2 'dig3)) (else (want-load 'dig3a 'caspad #f) (want-sound 'dig6 'dig7 'dig8))))
          )
        (when region-549
          (set! (-> region-549 on-enter) '(cond ((and (task-closed? "dig-knock-down-introduction") (not (task-complete? 35))) (want-display 'dig1 'display)) (else (want-display 'dig3a 'display))))
          (set! (-> region-549 on-exit) '(cond ((and (task-closed? "dig-knock-down-introduction") (not (task-complete? 35))) (want-display 'dig1 #f)) (else (want-display 'dig3a #f))))
          )
        )

      ;; air trains
      (let ((air-train-port (entity-by-name "air-train-1"))
            (air-train-land (entity-by-name "air-train-3"))
            (air-train-nest (entity-by-name "air-train-4")))
        (when air-train-port
          (set! (cdr (res-lump-struct air-train-port 'on-notice pair)) '(((not (has-air-train?)) 'hide) ((task-closed? "dig-knock-down-introduction") '("caspad-warp" (scene-play '("city-air-train-in-caspad" "caspad-air-train-out")) #f (want-anim "city-air-train-in-caspad"))) ((task-closed? "dig-find-totem-introduction") '("caspad-warp" (scene-play '("city-air-train-in-caspad" "caspad-air-train-out")) #f (want-anim "city-air-train-in-caspad"))) ((task-closed? "nest-get-to-gun-introduction") '("nest-warp" (scene-play '("city-air-train-in-nest" "nest-air-train-out")) #f (want-anim "city-air-train-in-nest")))  (else '("caspad-warp" (scene-play '("city-air-train-in-caspad" "caspad-air-train-out")) #f (want-anim "city-air-train-in-caspad")))))
          )
        (when air-train-land
          (set! (cdr (res-lump-struct air-train-land 'on-notice pair)) '(((not (has-air-train?)) 'hide) (else '("ctyport-warp" (scene-play '("caspad-air-train-in" "city-air-train-out")) #f (want-anim "caspad-air-train-in")))))
          )
        (when air-train-nest
          (set! (car (res-lump-struct air-train-nest 'on-notice pair)) 'cond)
          (set! (cdr (res-lump-struct air-train-nest 'on-notice pair)) '(((not (has-air-train?)) 'hide) (else '("ctyport-warp" (scene-play '("nest-air-train-in" "city-air-train-out")) #f (want-anim "nest-air-train-in")))))
          )
        )

      (none)
      )

    (defun runs-on-gem-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-task-close ()
    

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
