;;-*-Lisp-*-
(in-package goal)

(define *ap-info-jak1* (new 'static 'ap-info-jak1))
;; Init arrays
;;(set! (-> *ap-info-jak1* cells) (new 'static 'boxed-array :type uint32 :length 101 :allocated-length 101))
;;(set! (-> *ap-info-jak1* buzzers) (new 'static 'boxed-array :type uint32 :length 112 :allocated-length 112))
;; Setup markers
(charp<-string (-> *ap-info-jak1* end-marker) "end")

;; These don't need to be indexed like they are game-tasks.
;; We can just take them first-come-first-serve.

(defun ap-cell-checked! ((cell-id uint))
  (set! (-> *ap-info-jak1* cells-checked (-> *ap-info-jak1* next-cell-index)) cell-id)
  (+! (-> *ap-info-jak1* next-cell-index) 1.0)
  )

(defun ap-buzzer-checked! ((buzzer-id uint))
  (set! (-> *ap-info-jak1* buzzers-checked (-> *ap-info-jak1* next-buzzer-index)) buzzer-id)
  (+! (-> *ap-info-jak1* next-buzzer-index) 1.0)
  )

(defun ap-special-checked! ((special-id uint))
  (set! (-> *ap-info-jak1* specials-checked (-> *ap-info-jak1* next-special-index)) special-id)
  (+! (-> *ap-info-jak1* next-special-index) 1.0)
  )

(defun ap-special-checked? ((special-id uint))
  (let ((checked #f))
    (dotimes (i (-> *ap-info-jak1* next-special-index))
      (when (= special-id (-> *ap-info-jak1* specials-checked i))
        (set! checked #t)
        )
      )
    checked
    )
  )

;; These will be indexed like game-tasks, so make sure we set the right index!

;; These are the levels' buzz-tasks in the same order as defined by the archipelago
;; locations lists.
(defun ap-buzzer-task-to-index ((buzz-task uint))
  (cond
    ((= buzz-task 95) (the-as uint  0))
    ((= buzz-task 75) (the-as uint  1))
    ((= buzz-task 7)  (the-as uint  2))
    ((= buzz-task 20) (the-as uint  3))
    ((= buzz-task 28) (the-as uint  4))
    ((= buzz-task 68) (the-as uint  5))
    ((= buzz-task 76) (the-as uint  6))
    ((= buzz-task 57) (the-as uint  7))
    ((= buzz-task 49) (the-as uint  8))
    ((= buzz-task 43) (the-as uint  9))
    ((= buzz-task 88) (the-as uint 10))
    ((= buzz-task 77) (the-as uint 11))
    ((= buzz-task 85) (the-as uint 12))
    ((= buzz-task 65) (the-as uint 13))
    ((= buzz-task 90) (the-as uint 14))
    ((= buzz-task 91) (the-as uint 15))
    )
  )

(defun ap-buzzer-received! ((buzz-task uint) (buzz-index uint))
  (+! (-> *ap-info-jak1* buzzers-received (ap-buzzer-task-to-index buzz-task)) 1.0)
  )

(defun ap-buzzer-count ((buzz-task uint))
  (-> *ap-info-jak1* buzzers-received (ap-buzzer-task-to-index buzz-task))
  )

(defun ap-buzzer-specific-7? ((buzz-task uint))
  (= (ap-buzzer-count buzz-task) 7)
  )

;; Whereas specific-7 checks that you received all 7 buzzers for a single level,
;; progressive-7 asks if you received any 7 buzzers, so you will always receive 
;; a power cell every 7 flies, distributing their power cells more evenly 
;; throughout a run and making the game less RNG-heavy.
(defun ap-buzzer-progressive-7? ()
  (let ((sum 0))
       (dotimes (i 16)
          (+! sum (-> *ap-info-jak1* buzzers-received i))
          )
       (and (nonzero? sum) (= (mod sum 7) 0))
       )
  )

;; These are the game-tasks in the same order as defined by the archipelago
;; special location list.
(defun ap-special-task-to-index ((special-id uint))
  (cond
    ((= special-id 5)   (the-as uint  0))
    ((= special-id 4)   (the-as uint  1))
    ((= special-id 2)   (the-as uint  2))
    ((= special-id 17)  (the-as uint  3))
    ((= special-id 33)  (the-as uint  4))
    ((= special-id 105) (the-as uint  5)) ;; Reusing village3-button for the gondola.
    ((= special-id 60)  (the-as uint  6))
    ((= special-id 63)  (the-as uint  7))
    ((= special-id 71)  (the-as uint  8))
    ((= special-id 72)  (the-as uint  9))
    ((= special-id 73)  (the-as uint 10))
    ((= special-id 70)  (the-as uint 11))
    )
  )

(defun ap-special-received! ((special-id uint))
  (+! (-> *ap-info-jak1* specials-received (ap-special-task-to-index special-id)) 1.0)
  )

(defun ap-special-received? ((special-id uint))
  (= (-> *ap-info-jak1* specials-received (ap-special-task-to-index special-id)) 1)
  )