;;-*-Lisp-*-
(in-package goal)

(define *ap-info-jak1* (new 'static 'ap-info-jak1))
;; Init arrays
;;(set! (-> *ap-info-jak1* cells) (new 'static 'boxed-array :type uint32 :length 101 :allocated-length 101))
;;(set! (-> *ap-info-jak1* buzzers) (new 'static 'boxed-array :type uint32 :length 112 :allocated-length 112))
;; Setup markers
(charp<-string (-> *ap-info-jak1* end-marker) "end")

;; These don't need to be indexed like they are game-tasks.
;; We can just take them first-come-first-serve.
(defun ap-cell-checked! ((cell-id uint))
  (set! (-> *ap-info-jak1* cells-checked (-> *ap-info-jak1* next-cell-index)) cell-id)
  (+! (-> *ap-info-jak1* next-cell-index) 1.0)
  )

;; These don't need to be indexed like they are game-tasks.
;; We can just take them first-come-first-serve.
(defun ap-buzzer-checked! ((buzzer-id uint))
  (set! (-> *ap-info-jak1* buzzers-checked (-> *ap-info-jak1* next-buzzer-index)) buzzer-id)
  (+! (-> *ap-info-jak1* next-buzzer-index) 1.0)
  )

;; These don't need to be indexed like they are game-tasks.
;; We can just take them first-come-first-serve.
(defun ap-special-checked! ((special-id uint))
  (set! (-> *ap-info-jak1* specials-checked (-> *ap-info-jak1* next-special-index)) special-id)
  (+! (-> *ap-info-jak1* next-special-index) 1.0)
  )

;; These will be indexed like game-tasks, so make sure we set the right index!
;; These are the levels' buzz-tasks in the same order as defined by the archipelago
;; locations lists.
(defun ap-buzzer-received! ((buzz-task uint) (buzz-index uint))
  (let* ((level-index (cond
                        ((= buzz-task 95) 0)
                        ((= buzz-task 75) 1)
                        ((= buzz-task 7)  2)
                        ((= buzz-task 20) 3)
                        ((= buzz-task 28) 4)
                        ((= buzz-task 68) 5)
                        ((= buzz-task 76) 6)
                        ((= buzz-task 57) 7)
                        ((= buzz-task 49) 8)
                        ((= buzz-task 43) 9)
                        ((= buzz-task 88) 10)
                        ((= buzz-task 77) 11)
                        ((= buzz-task 85) 12)
                        ((= buzz-task 65) 13)
                        ((= buzz-task 90) 14)
                        ((= buzz-task 91) 15)
                      ))
        )
        (+! (-> *ap-info-jak1* buzzers-received level-index) 1.0)
        )
  )

;; These will be indexed like game-tasks, so make sure we check the right index!
;; These are the levels' buzz-tasks in the same order as defined by the archipelago
;; locations lists.
(defun ap-buzzer-specific-7? ((buzz-task uint))
  (let* ((level-index (cond
                        ((= buzz-task 95) 0)
                        ((= buzz-task 75) 1)
                        ((= buzz-task 7)  2)
                        ((= buzz-task 20) 3)
                        ((= buzz-task 28) 4)
                        ((= buzz-task 68) 5)
                        ((= buzz-task 76) 6)
                        ((= buzz-task 57) 7)
                        ((= buzz-task 49) 8)
                        ((= buzz-task 43) 9)
                        ((= buzz-task 88) 10)
                        ((= buzz-task 77) 11)
                        ((= buzz-task 85) 12)
                        ((= buzz-task 65) 13)
                        ((= buzz-task 90) 14)
                        ((= buzz-task 91) 15)
                      ))
        )
        (= (-> *ap-info-jak1* buzzers-received level-index) 7)
        )
  )

;; Whereas specific-7 checks that you received all 7 buzzers for a single level,
;; progressive-7 asks if you received any 7 buzzers, so you will always receive 
;; a power cell every 7 flies, distributing their power cells more evenly 
;; throughout a run and making the game less RNG-heavy.
(defun ap-buzzer-progressive-7? ()
  (let ((sum 0))
       (dotimes (i 16)
          (+! sum (-> *ap-info-jak1* buzzers-received i))
          )
       (and (nonzero? sum) (= (mod sum 7) 0))
       )
  )

;; These are the game-tasks in the same order as defined by the archipelago
;; special location list.
(defun ap-special-received! ((special-id uint))
  (let* ((special-index (cond
                          ((= special-id 5)  0)
                          ((= special-id 4)  1)
                          ((= special-id 2)  2)
                          ((= special-id 17) 3)
                          ((= special-id 60) 4)
                          ((= special-id 63) 5)
                          ((= special-id 71) 6)
                          ((= special-id 72) 7)
                          ((= special-id 73) 8)
                          ((= special-id 70) 9)
                        ))
        )
        (+! (-> *ap-info-jak1* specials-received special-index) 1)
        )
  )

;; These are the game-tasks in the same order as defined by the archipelago
;; special location list.
(defun ap-special-received? ((special-id uint))
  (let* ((special-index (cond
                          ((= special-id 5)  0)
                          ((= special-id 4)  1)
                          ((= special-id 2)  2)
                          ((= special-id 17) 3)
                          ((= special-id 60) 4)
                          ((= special-id 63) 5)
                          ((= special-id 71) 6)
                          ((= special-id 72) 7)
                          ((= special-id 73) 8)
                          ((= special-id 70) 9)
                        ))
        )
        (= (-> *ap-info-jak1* specials-received special-index) 1)
        )
  )