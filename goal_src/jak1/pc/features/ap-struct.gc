;;-*-Lisp-*-
(in-package goal)

(define *ap-info-jak1* (new 'static 'ap-info-jak1))
;; Init arrays
;;(set! (-> *ap-info-jak1* cells) (new 'static 'boxed-array :type uint32 :length 101 :allocated-length 101))
;;(set! (-> *ap-info-jak1* buzzers) (new 'static 'boxed-array :type uint32 :length 112 :allocated-length 112))
;; Setup markers
(charp<-string (-> *ap-info-jak1* end-marker) "end")

;; These don't need to be indexed like they are game-tasks.
;; We can just take them first-come-first-serve.
(defun ap-cell-checked! ((cell-id uint))
  (set! (-> *ap-info-jak1* cells-checked (-> *ap-info-jak1* next-cell-index)) cell-id)
  (+! (-> *ap-info-jak1* next-cell-index) 1.0)
  )

;; These don't need to be indexed like they are game-tasks.
;; We can just take them first-come-first-serve.
(defun ap-buzzer-checked! ((buzzer-id uint))
  (set! (-> *ap-info-jak1* buzzers-checked (-> *ap-info-jak1* next-buzzer-index)) buzzer-id)
  (+! (-> *ap-info-jak1* next-buzzer-index) 1.0)
  )

;; These will be indexed like game-tasks, so make sure we set the right index!
(defun ap-cell-received! ((cell-id uint))
  (set! (-> *ap-info-jak1* cells-received cell-id) (the-as uint 1))
  )

;; These will be indexed like game-tasks, so make sure we check the right index!
(defun ap-cell-received? ((cell-id uint))
  (logtest? (-> *ap-info-jak1* cells-received cell-id) 1)
  )
