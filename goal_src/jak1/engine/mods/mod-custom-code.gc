;;-*-Lisp-*-
(in-package goal)

;; name: mod-custom-code.gc
;; name in dgo: mod-custom-code
;; dgos: TODO

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
 This file contains function definitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb
|#

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin type definitions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype ap-message (structure)
  ((item-name string)
   (player-name string)))

(deftype ap-message-array (inline-array-class)
  ((target-index int)
   (messages ap-message :inline :dynamic)))

(set! (-> ap-message-array heap-base) (the-as uint 64))

(deftype ap-messenger (process)
  ((sent-messages ap-message-array)
   (recv-messages ap-message-array)
   (show-size int)
   (max-size int)
   (state-time time-frame))
  (:methods 
    (append-messages (_type_ symbol string string) none))
  (:states
    ap-messenger-show
    ap-messenger-hide
    ap-messenger-scroll))

(defbehavior ap-messenger-init-by-other ap-messenger ()
  (set! (-> self show-size) 3)
  (set! (-> self max-size) 10)
  (set! (-> self sent-messages) (new 'process 'ap-message-array (-> self max-size)))
  (dotimes (i (-> self max-size))
    (set! (-> self sent-messages messages i item-name) (new 'process 'string 32 (the string #f)))
    (set! (-> self sent-messages messages i player-name) (new 'process 'string 32 (the string #f))))
  (set! (-> self recv-messages) (new 'process 'ap-message-array (-> self max-size)))
  (set! (-> self sent-messages target-index) 0)
  (dotimes (i (-> self max-size))
    (set! (-> self recv-messages messages i item-name) (new 'process 'string 32 (the string #f)))
    (set! (-> self recv-messages messages i player-name) (new 'process 'string 32 (the string #f))))
  (set! (-> self recv-messages target-index) 0)
  (go ap-messenger-show))

;; This method is an important override! Without it, our data structures
;; will initialize with junk values and the game could crash if it moves 
;; the struct to a new address!
(defmethod relocate ((this ap-messenger) (offset int))
  (when (nonzero? (-> this sent-messages))
    (dotimes (i (-> this max-size))
      (when (nonzero? (-> this sent-messages messages i item-name)) (&+! (-> this sent-messages messages i item-name) offset))
      (when (nonzero? (-> this sent-messages messages i player-name)) (&+! (-> this sent-messages messages i player-name) offset)))
    (&+! (-> this sent-messages) offset))
  (when (nonzero? (-> this recv-messages))
    (dotimes (i (-> this max-size))
      (when (nonzero? (-> this recv-messages messages i item-name)) (&+! (-> this recv-messages messages i item-name) offset))
      (when (nonzero? (-> this recv-messages messages i player-name)) (&+! (-> this recv-messages messages i player-name) offset)))
    (&+! (-> this recv-messages) offset))
  (call-parent-method this offset))

(defun shift-messages ((target-array ap-message-array) (show-size int) (max-size int))
  (dotimes (i max-size)
    (when (< i (- max-size 1))
      (set! (-> target-array messages i item-name) (-> target-array messages (+ i 1) item-name))
      (set! (-> target-array messages i player-name) (-> target-array messages (+ i 1) player-name))))
  (if (> (-> target-array target-index) show-size)
    (-! (-> target-array target-index) 1)))

;; Called by the Archipelago client to inform the game about new items being sent/received.
;; Direction can be either 'sent or 'recv, to tell us which array to write info to.
(defmethod append-messages ((this ap-messenger) (direction symbol) (item-name string) (player-name string))
  (let* ((target-array (case direction
          (('sent) (-> this sent-messages))
          (('recv) (-> this recv-messages)))))
    ;; Don't go over the upper bound!
    (if (= (-> target-array target-index) (-> this max-size)) 
      (set! (-> target-array target-index) (- (-> this max-size) 1)))
    ;; Add the new information to the target index.
    (set! (-> target-array messages (-> target-array target-index) item-name) item-name)
    (set! (-> target-array messages (-> target-array target-index) player-name) player-name)
    ;; Incremement target-index to the next available empty space.
    (if (< (-> target-array target-index) (- (-> this max-size) 1))
      (+! (-> target-array target-index) 1)))
  (none))

(defun draw-message ((message string) (bottom float) (index int))
  (let ((s4-1 (new 'stack 'font-context *font-default-matrix* 5 (the int bottom) 0.0 (font-color default) (font-flags shadow kerning large))))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id subtitle))
      (set! (-> s4-1 origin y) (- bottom (* 9 index)))  ;; Handles smooth scrolling and separate lines.
      (set! (-> s4-1 width) (the float 1920))           ;; Set width to fit 32-char names on a single line.
      (draw-string-xy-scaled-ctxt message buf 256 (the int (- bottom (* 9 index))) s4-1 0.36))))

(defbehavior draw-messages ap-messenger ((bottom float))
  (let* ((active-array (case *hud-collectable-view*
          (((hud-collectable-view game-totals) (hud-collectable-view level-totals)) (-> self sent-messages))
          (((hud-collectable-view original)) (-> self recv-messages))))
         (verb (case *hud-collectable-view*
          (((hud-collectable-view game-totals) (hud-collectable-view level-totals)) "SENT")
          (((hud-collectable-view original)) "GOT")))
         (dir (case *hud-collectable-view*
          (((hud-collectable-view game-totals) (hud-collectable-view level-totals)) "TO")
          (((hud-collectable-view original)) "FROM"))))
    (dotimes (i (-> self show-size))
      ;; Don't print at all if no item is here.
      (when (not (string= (-> active-array messages i item-name) ""))
        ;; Print a special format for self-found items.
        (when (string= (-> active-array messages i player-name) "MYSELF")
          (let ((item (-> active-array messages i item-name)))
            (substring! *temp-string* item (- (length item) 4) (length item))
            (cond
              ((string= *temp-string* "TRAP") (draw-message (string-format "FOUND ~3L~S~0L" item) bottom i))
              ((string= *temp-string* "PILL") (draw-message (string-format "FOUND ~6L~S~0L" item) bottom i))
              (else (draw-message (string-format "FOUND ~8L~S~0L" item) bottom i)))))
        ;; Print the usual format for everything else.
        (when (not (string= (-> active-array messages i player-name) "MYSELF"))
          (let ((item (-> active-array messages i item-name))
                (player (-> active-array messages i player-name)))
            (substring! *temp-string* item (- (length item) 4) (length item))
            (cond
              ((string= *temp-string* "TRAP") (draw-message (string-format "~S ~3L~S~0L ~S ~12L~S~0L" verb item dir player) bottom i))
              ((string= *temp-string* "PILL") (draw-message (string-format "~S ~6L~S~0L ~S ~12L~S~0L" verb item dir player) bottom i))
              (else (draw-message (string-format "~S ~8L~S~0L ~S ~12L~S~0L" verb item dir player) bottom i)))))))))

(defstate ap-messenger-show (ap-messenger)
  :code (behavior ()
    (loop
      (draw-messages 215.0)
      (when (or (paused?) (not (-> *ap-settings* item-messages?)))
        (go ap-messenger-hide))
      (case *hud-collectable-view*
        (((hud-collectable-view game-totals) (hud-collectable-view level-totals))
          ;; Silently shift the messages in the inactive queue.
          (when (> (-> self recv-messages target-index) (-> self show-size))
            (shift-messages (-> self recv-messages) (-> self show-size) (-> self max-size)))
          ;; Visually shift the messages in the active queue.
          (when (> (-> self sent-messages target-index) (-> self show-size))
            (go ap-messenger-scroll)))
        (((hud-collectable-view original)) 
          ;; Silently shift the messages in the inactive queue.
          (when (> (-> self sent-messages target-index) (-> self show-size))
            (shift-messages (-> self sent-messages) (-> self show-size) (-> self max-size)))
          ;; Visually shift the messages in the active queue.
          (when (> (-> self recv-messages target-index) (-> self show-size))
            (go ap-messenger-scroll))))
      (suspend))))

(defstate ap-messenger-hide (ap-messenger)
  :code (behavior ()
    (loop
      (when (and (not (paused?)) (-> *ap-settings* item-messages?))
        (go ap-messenger-show))
      ;; When hidden, both arrays should be updated in the background.
      (when (> (-> self recv-messages target-index) (-> self show-size))
        (shift-messages (-> self recv-messages) (-> self show-size) (-> self max-size)))
      (when (> (-> self sent-messages target-index) (-> self show-size))
        (shift-messages (-> self sent-messages) (-> self show-size) (-> self max-size)))
      (suspend))))

(defstate ap-messenger-scroll (ap-messenger)
  :enter (behavior ()
    (set-state-time))
  :code (behavior ()
    (loop
      (if (time-passed? (seconds 0.25))
        (let* ((active-array (case *hud-collectable-view*
            (((hud-collectable-view game-totals)
              (hud-collectable-view level-totals)) (-> self sent-messages))
            (((hud-collectable-view original)) (-> self recv-messages)))))
          ;; If the queue still has items, restart the scrolling, else go back to show.
          (if (> (-> active-array target-index) (+ (-> self show-size) 1))
            (go ap-messenger-scroll)
            (go ap-messenger-show)))
        ;; Smoothly scroll through the existing messages.
        (let ((y (/ (the float (- (current-time) (-> self state-time))) 7.5)))
          (draw-messages (+ 215.0 y))))
      (suspend)))
  :exit (behavior ()
    (let* ((active-array (case *hud-collectable-view*
        (((hud-collectable-view game-totals)
          (hud-collectable-view level-totals)) (-> self sent-messages))
        (((hud-collectable-view original)) (-> self recv-messages)))))
      (shift-messages active-array (-> self show-size) (-> self max-size)))))

(defun ap-messenger-run ()
  "Run the AP Messenger"
  (process-spawn ap-messenger))

(defun ap-messenger-stop ()
  "Stop the AP Messenger"
  (kill-by-name "ap-messenger" *active-pool*))

(define-perm *ap-messenger* (pointer ap-messenger) (the (pointer ap-messenger) #f))

(defun debug-messenger ((dir symbol) (item string) (player string))
  (append-messages (-> *ap-messenger* 0) dir item player))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin function definitions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun runs-every-frame ()
  ;;(increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc
  (if *show-input-display* (input-display-on) (input-display-off))
  ;; ensure orb-placer is spawned/killed as requested, debug menu is updated
  (when *debug-segment*
    (orb-placer-maintenance))
  (when (not *ap-messenger*)
    (set! *ap-messenger* (ap-messenger-run)))
  (none))

(defun runs-on-orb-pickup ((parent process-tree))
  (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
    ;; Code here runs on ANY orb pickup
    (when from-cache?
      ;; Code here runs only if the orb was from an orb cache
      )
    (when (not from-cache?)
      ;; Code here runs only if the orb was NOT from an orb cache
      ))
  (none))

(defun runs-on-fly-pickup ()
  ;; Code here runs on any scout fly pickup
  (none))

(defun runs-on-cell-pickup ((cell-event symbol))
  (case cell-event
    (('pickup)
     ;; Code here runs as soon as you pickup a powercell
     )
    (('cutscene-end)
     ;; Code here runs at the end of any powercell cutscene
     ))
  (none))

(defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
  (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
    ;; Code here runs as soon as you pickup ANY eco
    (case eco-type
      (((pickup-type eco-yellow))
       ;; Code here runs as soon as you pickup yellow eco
       )
      (((pickup-type eco-red))
       ;; Code here runs as soon as you pickup red eco
       )
      (((pickup-type eco-blue))
       ;; Code here runs as soon as you pickup blue eco
       )
      (((pickup-type eco-pill))
       ;; Code here runs as soon as you pickup small green eco
       )
      (((pickup-type eco-green))
       ;; Code here runs as soon as you pickup big green eco 
       ))
    (when from-vent?
      ;; Code here runs only if the eco was picked up from a vent
      ))
  (none))

(defun runs-on-jak-spawn ()
  ;; Code here runs every time jak spawns (loading a file new game or death)
  ;;uncomment this to use custom music for custom levels - the function is in mod-common-functions.gc
  ;;(process-spawn-function process music-manager-proc)
  (none))

(defun runs-on-jak-death ((death-event symbol))
  (case death-event
    (('dying)
     ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
     )
    (('blackout)
     ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns
     ))
  (none))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; deprecated function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| these are no longer recommended/supported however we include them anyways to not break anyones mods. |#
